@page "/Member-Task"
@using forPractice.Data;
@inject TaskService TaskService
@inject IJSRuntime JS

<h3>My tasks</h3>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Task Description</th>
                <th>Deadline</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @if (taskModels != null)
            {
                @foreach (var task in taskModels)
                {
                    <tr>
                        <td>@task.TaskDescription</td>
                        <td>@task.Deadline</td>
                        <td>
                            <select @onchange="(e) => UpdateStatus(e, task)">
                                <option value="Pending" selected="@CheckStatusWithDelay("Pending", task.Status)">Pending</option>
                                <option value="InProgress" selected="@CheckStatusWithDelay("InProgress", task.Status)">In Progress</option>
                                <option value="Completed" selected="@CheckStatusWithDelay("Completed", task.Status)">Completed</option>
                                <!-- Add more options as needed -->
                            </select>
                        </td>





                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<TaskModel> taskModels;

    protected override async Task OnInitializedAsync()
    {
        string Id = await JS.InvokeAsync<string>("localStorage.getItem", "id");
        taskModels = await TaskService.GetMemberTask(Id);
    }

    private async Task UpdateStatus(ChangeEventArgs e, TaskModel task)
    {
        string selectedValue = e.Value.ToString();
        task.Status = selectedValue; // Update the status of the task
        await TaskService.UpdateStatusAsync(task);
        // You can perform further actions based on the selected value here
    }
    private bool CheckStatusWithDelay(string expectedStatus, string currentStatus)
    {
        // Introduce a delay using Task.Delay before checking the condition
        System.Threading.Thread.Sleep(1000); // Adjust the delay duration as needed

        // Check if the current status matches the expected status
        return currentStatus == expectedStatus;
    }


}
